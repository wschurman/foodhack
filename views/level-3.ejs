<div class="page-header">
  <h1>
  	Level 3 Problems
  	<small>ChipotleÂ® Burrito</small>
  </h1>
</div>

<h2>Finding Top Students</h2>
<div class="bs-docs-example">
  Download <a href="http://cl.ly/text/0w3B0T1D2l2w" target="_blank">student_grades.txt</a>. The format of this file is simple, the first column is a student's name and the second column is his or her score in an exam. The only exception is the first line of the file which is a single integer which we will call k. Write code that can correctly parse this file and return an array with the top k students. The runtime of your code must be O(n) where N is the number of students (the actual time taken in parsing the strings of the document will not be counted in the runtime analysis).
</div>
<a href="/submit?p=3-1" data-toggle="modal" data-target="#myModal" class="btn btn-primary">
  <i class="icon-thumbs-up icon-white"></i> Submit Solution
</a>
<hr />

<h2>Exploit this website!</h2>
<div class="bs-docs-example">
  <u>DO NOT DDoS it</u>. Find an exploit, test that it works, show us. We are aware of one. There may be more. Do not share this exploit with others. Hint: start at the source. Note: changing the UID in socket.io call is no longer correct (has been done)
</div>
<a href="/submit?p=3-2" data-toggle="modal" data-target="#myModal" class="btn btn-primary">
  <i class="icon-thumbs-up icon-white"></i> Submit Solution
</a>
<hr />

<h2>Cost-Effective Routes</h2>
<div class="bs-docs-example">
  Download <a href="http://cl.ly/text/0I3O042T141L" target="_blank">bus_stops.txt</a>. This describes a hypothetical and exaggerated situation where there are bus stops labeled A through G.
The first line of the document specifies the starting stop and the final target stop. So "A G" means that the bus driver wants to go from A to G.
For all other lines, the first column represents a bus stop from which the bus will be leaving, and the second column is the bus stop at which the bus will arrive. The third column is how long the trip takes, and the fourth column is how many people are waiting to get on the bus at the target bus stop. For example, "A B 20 10" means that the trip from A to B takes 20 minutes, and there are 10 people waiting to get on the bus at B.
Imagine that it costs the bus driver $1.00 every minute of driving, but every passenger picked up earns the bus driver $1.50. Write code that can parse the given text file and prints out the route to go from the start stop to the final stop (in this case, A to G) that results in the largest profit. Also, print out what this largest profit is.
Remember that when testing your code we may change the text file, so make sure to not hardcode any bus stop names or numbers.
</div>
<a href="/submit?p=3-3" data-toggle="modal" data-target="#myModal" class="btn btn-primary">
  <i class="icon-thumbs-up icon-white"></i> Submit Solution
</a>
<hr />

<h2>Solve levels 3-4 of Stripe CTF</h2>
<div class="bs-docs-example">
  See <a href="https://stripe-ctf.com" target="_blank">https://stripe-ctf.com</a>. Submit either your ctf screen name and make it public or show us your progress page. You will automatically get a cookie as well!
</div>
<a href="/submit?p=3-4" data-toggle="modal" data-target="#myModal" class="btn btn-primary">
  <i class="icon-thumbs-up icon-white"></i> Submit Solution
</a>
<hr />


<h2>The Salesman That Travels</h2>
<div class="bs-docs-example">
  Solve the Traveling Salesman problem in O(n) time.*
</div>
<a href="/submit?p=3-5" data-toggle="modal" data-target="#myModal" class="btn btn-primary">
  <i class="icon-thumbs-up icon-white"></i> Submit Solution
</a>
<hr />


<h2>Longest Common Substring (for 3 cookies, no burrito, sorry)</h2>
<div class="bs-docs-example">
  Implement a function that takes two files containing long strings, parses them, and finds their longest common subsequence. The runtime of the algorithm should be O(nm) where n and m are the lengths of the two strings (ignore parsing complexity).
  Download the files <a href="http://cl.ly/3B1X0L152h30" target="_blank">here</a>.
</div>
<pre class="prettyprint linenums">
// Example
str1 = ABCAJSHDLAKWO
str2 = NFJACAKDJDLAUHSN

function longest_substring(s1, s2) {
  // To Be Implemented
}

print longest_substring(str1, str2)
// Outputs: DLA
</pre>
<a href="/submit?p=3-6" data-toggle="modal" data-target="#myModal" class="btn btn-primary">
  <i class="icon-thumbs-up icon-white"></i> Submit Solution
</a>
<hr />


<h2>Tic-tac-toe</h2>
<div class="bs-docs-example">
  Create a tic-tac-toe game (with a GUI) in which a human plays against the CPU. The AI must be able to play the game perfectly (hence, must never lose against the human). The priority is the AI, not the UI.
</div>
<a href="/submit?p=3-7" data-toggle="modal" data-target="#myModal" class="btn btn-primary">
  <i class="icon-thumbs-up icon-white"></i> Submit Solution
</a>
<hr />

* = Please note that if you solve the traveling salesman problem you will not only get a burrito but also a million dollars, and a job at Facebook. That is all.
<br />
<br />